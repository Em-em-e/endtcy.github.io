// Generated by CoffeeScript 1.8.0
(function() {
  this.mobileMode = function() {
    if (navigator.appVersion.indexOf("iPad") !== -1) {
      return true;
    }
    if (navigator.appVersion.indexOf("iOS") !== -1) {
      return true;
    }
    if (navigator.appVersion.indexOf("iPhone") !== -1) {
      return true;
    }
    if (navigator.appVersion.indexOf("Android") !== -1) {
      return true;
    }
    return false;
  };

  window.AudioTask = (function() {
    function AudioTask(n, timeout, audioPlayer) {
      this.n = n;
      this.audioPlayer = audioPlayer;
      setTimeout((function(_this) {
        return function() {
          return _this.play();
        };
      })(this), timeout);
      return;
    }

    AudioTask.prototype.play = function() {
      return this.audioPlayer.play(this.n, 1.0);
    };

    return AudioTask;

  })();

  window.AudioSystem = (function() {
    function AudioSystem() {
      this.disabled = window.mobileMode();
      if (this.disabled) {
        console.info('Mobile mode on. Sound disabled.');
        return;
      }
      this.sounds = {};
      this.copies = 10;
      this.pointer = [];
    }

    AudioSystem.prototype.load_file = function(filename) {
      var fileType, j, _i, _ref, _results;
      if (filename in this.sounds) {
        return;
      }
      this.pointer[filename] = 0;
      this.sounds[filename] = [];
      fileType = "mp3";
      this.sounds[filename][0] = new Audio("sound/" + filename + "." + fileType);
      this.sounds[filename][0].load();
      _results = [];
      for (j = _i = 1, _ref = this.copies; 1 <= _ref ? _i < _ref : _i > _ref; j = 1 <= _ref ? ++_i : --_i) {
        this.sounds[filename][j] = this.sounds[filename][0].cloneNode(true);
        _results.push(this.sounds[filename][j].load());
      }
      return _results;
    };

    AudioSystem.prototype.play = function(filename, volume) {
      var howl;
      if (volume == null) {
        volume = 0.7;
      }
      howl = new Howl({
        urls: ["sound/" + filename + ".wav"],
        loop: true,
        volume: volume
      });
      return howl.play();
    };

    return AudioSystem;

  })();

}).call(this);

//# sourceMappingURL=audio.js.map
